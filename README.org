#+BEGIN_HTML
<a href="https://ci.appveyor.com/project/bozenne/lmbreak"><img src="https://ci.appveyor.com/api/projects/status/github/bozenne/lmbreak?svg=true" alt="Build status"></a>
<a href="https://github.com/bozenne/lmbreak/actions"><img src="https://github.com/bozenne/lmbreak/workflows/r/badge.svg" alt="Build status"></a>
<a href="http://www.gnu.org/licenses/gpl-3.0.html"><img src="https://img.shields.io/badge/License-GPLv3-blue.svg" alt="License"></a>
#+END_HTML

#+BEGIN_SRC R :exports none :results output :session *R* :cache no
options(width = 100)
#+END_SRC

#+RESULTS:

* lmbreak: Linear Regression with Unknown Breakpoints

** Installation

You can download the latest stable =GitHub= version using:
#+BEGIN_SRC R :exports both :eval never
library(remotes)
install_github("bozenne/lmbreak")
#+END_SRC

** Functionalities

The functionnalities of the package:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
library(lmbreak)
#+END_SRC

#+RESULTS:
: lmbreak version 0.0.1

will be exemplified on the following dataset:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
data(SDIpsilo, package = "lmbreak")
SDIpsilo <- SDIpsilo[SDIpsilo$type %in% c("noise","trailing") == FALSE,]
str(SDIpsilo)
#+END_SRC

#+RESULTS:
: 'data.frame':	326 obs. of  4 variables:
:  $ id   : Factor w/ 15 levels "1","2","3","4",..: 1 1 1 1 1 1 1 1 1 1 ...
:  $ time : num  0 20 40 60 80 100 120 160 180 200 ...
:  $ type : chr  "signal" "signal" "signal" "signal" ...
:  $ score: num  0 1 3 8 10 10 10 10 10 7 ...

where the experience of 15 individuals after drug intake is monitored
over time. To start with consider the data of individual 13:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
SDIpsilo13 <- SDIpsilo[SDIpsilo$id==13,]
#+END_SRC

#+RESULTS:

The =lmbreak= function can be used to model his experience by
breakpoint model:
- with 2 breakpoints and three slopes ("111" pattern)
- with 2 breakpoints: one slope, one plateau, one slope ("101" pattern)
- with 1 breakpoint: two slopes ("11" pattern)
#+BEGIN_SRC R :exports code :results silent :session *R* :cache no
e.XP111 <- lmbreak(score ~ 0 + bp(time, "111"), data = SDIpsilo13)
e.XP101 <- lmbreak(score ~ 0 + bp(time, "101"), data = SDIpsilo13)
e.XP11 <- lmbreak(score ~ 0 + bp(time, "11"), data = SDIpsilo13)
#+END_SRC


The call to =lmbreak= is similar to the =lm= function except that the
breakpoint variable (i.e. variable whose relationship with the
response variable is to be modeled using broken lines) should be
wrapper by =bp()= and indicate the number of breakpoints and possible
constrains on the slopes (pattern). The function will then estimate
the the position of the breakpoint and slopes. The method =plot= can
then be applied to the output of =lmbreak= to visualize the model fit:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
plot(e.XP111, ylim = c(0,12)) ## left panel
plot(e.XP101, ylim = c(0,12)) ## middle panel
plot(e.XP11, ylim = c(0,12)) ## right panel
#+END_SRC

#+RESULTS:
: Advarselsbesked:
: [1m[22mRemoved 4 rows containing missing values (`geom_point()`).
: Advarselsbesked:
: [1m[22mRemoved 4 rows containing missing values (`geom_point()`).
: Advarselsbesked:
: [1m[22mRemoved 4 rows containing missing values (`geom_point()`).

#+BEGIN_SRC R :exports none :results output :session *R* :cache no
gg12 <- ggpubr::ggarrange(ggplot2::autoplot(e.XP111, ylim = c(0,12))$plot + ggplot2::ggtitle("Pattern 111"),
                          ggplot2::autoplot(e.XP101, ylim = c(0,12))$plot + ggplot2::ggtitle("Pattern 101"),
                          ggplot2::autoplot(e.XP11, ylim = c(0,12))$plot + ggplot2::ggtitle("Pattern 11"),
                          common.legend = TRUE, legend = "bottom", nrow = 1)
ggplot2::ggsave(gg12, width = 10, height = 4, file = "inst/figures/gg-indiv-example.png")
#+END_SRC

#+RESULTS:
: Advarselsbeskeder:
: 1: [1m[22mRemoved 4 rows containing missing values (`geom_point()`). 
: 2: [1m[22mRemoved 4 rows containing missing values (`geom_point()`). 
: 3: [1m[22mRemoved 4 rows containing missing values (`geom_point()`). 
: 4: [1m[22mRemoved 4 rows containing missing values (`geom_point()`).

#+BEGIN_HTML
<img src="./inst/figures/gg-indiv-example.png" title="101 pattern - patient 1" alt="101 pattern - patient 1" width="100%" style="display: block; margin: auto;" />
#+END_HTML


 The method =model.tables= can be used to obtain a concise output of
the estimates in a =data.frame= format:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
model.tables(e.XP101)
#+END_SRC

#+RESULTS:
:        time  duration intercept  slope
: 1   0.00000  87.87879  0.000000  0.110
: 2  87.87879 142.78788  9.666667  0.000
: 3 230.66667  69.33333  9.666667 -0.125
: 4 300.00000        NA  1.000000     NA

When specifying a pattern that does not fit the data, the estimation
procedure may fail to find reliable estimates and will output a
warning message:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
e.XP01 <- lmbreak(score ~ 0 + bp(time, "01"), data = SDIpsilo13)
#+END_SRC

#+RESULTS:
: Advarselsbesked:
: I lmbreak(score ~ 0 + bp(time, "01"), data = SDIpsilo13) :
:   The optimizer did not converge to a stable solution.

It is possible to specify alternative patterns that will only be
investigated if the previous one(s) had convergence issues:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
e.XPrescue <- lmbreak(score ~ 0 + bp(time, c("01","11")), data = SDIpsilo13)
coef(e.XPrescue,c("pattern","breakpoint"))
#+END_SRC

#+RESULTS:
:   pattern breakpoint
: 1      11   126.9093

This is especially useful when using the =mlmbreak= function to fit
(separate) breakpoint models on several individuals:
#+BEGIN_SRC R :exports code :results output :session *R* :cache no
e.XPall <- mlmbreak(score ~ 0 + bp(time, c("101","11")), cluster = "id", data = SDIpsilo,
                    trace = FALSE)
e.XPall
#+END_SRC

#+RESULTS:
#+begin_example

Call:
mlmbreak(formula = score ~ 0 + bp(time, c("101", "11")), data = SDIpsilo, 
    cluster = "id", trace = FALSE)

Breakpoints:
   id pattern   cv continuity      breakpoint   maxVs
1   1     101 TRUE       TRUE 84.507, 162.051 < 1e-05
2   2      11 TRUE       TRUE          59.086 < 1e-05
3   3     101 TRUE       TRUE 65.143, 166.481 < 1e-05
4   4     101 TRUE       TRUE  103.12, 180.51 < 1e-05
5   5     101 TRUE       TRUE 49.123, 173.913 < 1e-05
6   6     101 TRUE       TRUE         70, 150 < 1e-05
7   7     101 TRUE       TRUE 46.032, 101.549 < 1e-05
8   8     101 TRUE       TRUE 86.957, 129.533 < 1e-05
9   9     101 TRUE       TRUE 49.123, 115.938 < 1e-05
10 10     101 TRUE       TRUE 65.116, 195.238 < 1e-05
11 11     101 TRUE       TRUE  44.737, 93.294 < 1e-05
12 12     101 TRUE       TRUE 43.478, 150.992 < 1e-05
13 13     101 TRUE       TRUE 87.879, 230.667 < 1e-05
14 14     101 TRUE       TRUE  157.89, 248.02 < 1e-05
15 15     101 TRUE       TRUE  157.30, 234.74 < 1e-05
#+end_example

Here an upslope, plateau, normalization (101 pattern) could be fitted
for all individuals but the second one which did not exhibit a
plateau. Thus the 11 pattern was fitted to this individual. Once more
key summary statistics can be extracted using the =model.tables=
method:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
model.tables(e.XPall, format = "list")[1:2]
#+END_SRC

#+RESULTS:
#+begin_example
[[1]]
       time  duration intercept       slope
1   0.00000  84.50704         0  0.11833333
2  84.50704  77.54424        10  0.00000000
3 162.05128 157.94872        10 -0.06964286
4 320.00000        NA        -1          NA

[[2]]
       time  duration intercept       slope
1   0.00000  59.08571  0.000000  0.13500000
2  59.08571 200.91429  7.976571 -0.02409091
3 260.00000        NA  3.136364          NA
#+end_example

and a graphical display of the model fit can be obtained using the =plot= method:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
plot(e.XPall, ylim = c(0,10))
#+END_SRC

#+RESULTS:
: Advarselsbesked:
: [1m[22mRemoved 89 rows containing missing values (`geom_point()`).


#+BEGIN_SRC R :exports none :results output :session *R* :cache no
ggplot2::ggsave(ggplot2::autoplot(e.XPall, ylim = c(0,10))$plot, width = 8, height = 8, file = "inst/figures/gg-all-example.png")
#+END_SRC

#+RESULTS:
: Advarselsbesked:
: [1m[22mRemoved 89 rows containing missing values (`geom_point()`).

#+BEGIN_HTML
<img src="./inst/figures/gg-all-example.png" title="101/11 pattern - all patient" alt="101/11 pattern - all patient" width="100%" style="display: block; margin: auto;" />
#+END_HTML

** Limitations & alternative

Currently the package is limited to a single continous response
variable and a single breakpoint variable without interaction with
other covariates. No tools for uncertainty quantification or
statistical inference is implemented.

See the [[https://cran.r-project.org/web/packages/segmented/][segmented]] package for an alternative and more mature
implementation of breakpoint models.
