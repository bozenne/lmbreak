#+BEGIN_HTML
<a href="https://ci.appveyor.com/project/bozenne/lmbreak"><img src="https://ci.appveyor.com/api/projects/status/github/bozenne/lmbreak?svg=true" alt="Build status"></a>
<a href="https://github.com/bozenne/lmbreak/actions"><img src="https://github.com/bozenne/lmbreak/actions/workflows/r.yml/badge.svg" alt="Build status"></a>
<a href="http://www.gnu.org/licenses/gpl-3.0.html"><img src="https://img.shields.io/badge/License-GPLv3-blue.svg" alt="License"></a>
#+END_HTML

#+BEGIN_SRC R :exports none :results output :session *R* :cache no
options(width = 100)
#+END_SRC

#+RESULTS:

* lmbreak: Linear Regression with Unknown Breakpoints

** Installation

You can download the latest stable =GitHub= version using:
#+BEGIN_SRC R :exports both :eval never
library(remotes)
install_github("bozenne/lmbreak")
#+END_SRC

** Functionalities

The functionnalities of the package:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
library(lmbreak)
#+END_SRC

#+RESULTS:
: lmbreak version 0.0.3

will be exemplified on the following dataset:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
data(SDIpsilo, package = "lmbreak")
SDIpsilo <- SDIpsilo[SDIpsilo$type %in% c("noise","trailing") == FALSE,]
str(SDIpsilo)
#+END_SRC

#+RESULTS:
: 'data.frame':	326 obs. of  4 variables:
:  $ id   : Factor w/ 15 levels "1","2","3","4",..: 1 1 1 1 1 1 1 1 1 1 ...
:  $ time : num  0 20 40 60 80 100 120 160 180 200 ...
:  $ type : chr  "signal" "signal" "signal" "signal" ...
:  $ score: num  0 1 3 8 10 10 10 10 10 7 ...

where the experience of 15 individuals after drug intake is monitored
over time. To start with consider the data of individual 13:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
SDIpsilo13 <- SDIpsilo[SDIpsilo$id==13,]
#+END_SRC

#+RESULTS:

The =lmbreak= function can be used to model his experience by
breakpoint model:
- with 2 breakpoints and three slopes ("111" pattern)
- with 2 breakpoints: one slope, one plateau, one slope ("101" pattern)
- with 1 breakpoint: two slopes ("11" pattern)
#+BEGIN_SRC R :exports code :results silent :session *R* :cache no
e.XP111 <- lmbreak(score ~ 0 + bp(time, "111"), data = SDIpsilo13)
e.XP101 <- lmbreak(score ~ 0 + bp(time, "101"), data = SDIpsilo13)
e.XP11 <- lmbreak(score ~ 0 + bp(time, "11"), data = SDIpsilo13)
#+END_SRC


The call to =lmbreak= is similar to the =lm= function except that the
breakpoint variable (i.e. variable whose relationship with the
response variable is to be modeled using broken lines) should be
wrapper by =bp()= and indicate the number of breakpoints and possible
constrains on the slopes (pattern). The function will then estimate
the the position of the breakpoint and slopes. The method =plot= can
then be applied to the output of =lmbreak= to visualize the model fit:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
plot(e.XP111, ylim = c(0,12)) ## left panel
plot(e.XP101, ylim = c(0,12)) ## middle panel
plot(e.XP11, ylim = c(0,12)) ## right panel
#+END_SRC

#+RESULTS:
: Warning message:
: [1m[22mRemoved 4 rows containing missing values or values outside the scale range (`geom_point()`).
: Warning message:
: [1m[22mRemoved 4 rows containing missing values or values outside the scale range (`geom_point()`).
: Warning message:
: [1m[22mRemoved 4 rows containing missing values or values outside the scale range (`geom_point()`).

#+BEGIN_SRC R :exports none :results output :session *R* :cache no
gg12 <- ggpubr::ggarrange(ggplot2::autoplot(e.XP111, ylim = c(0,12))$plot + ggplot2::ggtitle("Pattern 111"),
                          ggplot2::autoplot(e.XP101, ylim = c(0,12))$plot + ggplot2::ggtitle("Pattern 101"),
                          ggplot2::autoplot(e.XP11, ylim = c(0,12))$plot + ggplot2::ggtitle("Pattern 11"),
                          common.legend = TRUE, legend = "bottom", nrow = 1)
ggplot2::ggsave(gg12, width = 10, height = 4, file = "inst/figures/gg-indiv-example.png")
#+END_SRC

#+RESULTS:
: Warning messages:
: 1: [1m[22mRemoved 4 rows containing missing values or values outside the scale range (`geom_point()`). 
: 2: [1m[22mRemoved 4 rows containing missing values or values outside the scale range (`geom_point()`). 
: 3: [1m[22mRemoved 4 rows containing missing values or values outside the scale range (`geom_point()`). 
: 4: [1m[22mRemoved 4 rows containing missing values or values outside the scale range (`geom_point()`).

#+BEGIN_HTML
<img src="./inst/figures/gg-indiv-example.png" title="101 pattern - patient 1" alt="101 pattern - patient 1" width="100%" style="display: block; margin: auto;" />
#+END_HTML


 The method =model.tables= can be used to obtain a concise output of
the estimates in a =data.frame= format:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
model.tables(e.XP101)
#+END_SRC

#+RESULTS:
:        time  duration intercept  slope
: 1   0.00000  87.88131  0.000000  0.110
: 2  87.88131 142.78560  9.666944  0.000
: 3 230.66691  69.33309  9.666944 -0.125
: 4 300.00000        NA  1.000307     NA

When specifying a pattern that does not fit the data, the estimation
procedure may fail to find reliable estimates and will output a
warning message:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
e.XP01 <- lmbreak(score ~ 0 + bp(time, "01"), data = SDIpsilo13)
#+END_SRC

#+RESULTS:
: Warning message:
: In lmbreak(score ~ 0 + bp(time, "01"), data = SDIpsilo13) :
:   The solution found by the optimizer has invalid breakpoint positions.

It is possible to specify alternative patterns that will only be
investigated if the previous one(s) had convergence issues:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
e.XPrescue <- lmbreak(score ~ 0 + bp(time, c("01","11")), data = SDIpsilo13)
coef(e.XPrescue,c("pattern","breakpoint"))
#+END_SRC

#+RESULTS:
:   pattern breakpoint
: 1      11   126.9094

This is especially useful when using the =mlmbreak= function to fit
(separate) breakpoint models on several individuals:
#+BEGIN_SRC R :exports code :results output :session *R* :cache no
e.XPall <- mlmbreak(score ~ 0 + bp(time, c("101","11")), cluster = "id", data = SDIpsilo,
                    trace = FALSE)
summary(e.XPall)
#+END_SRC

#+RESULTS:
#+begin_example

Call:
mlmbreak(formula = score ~ 0 + bp(time, c("101", "11")), data = SDIpsilo, 
    cluster = "id", trace = FALSE)

Breakpoints:
   id pattern   cv continuity      R2      breakpoint      maxVs
1   1     101 TRUE       TRUE 0.98332 84.507, 162.051    < 1e-05
2   2     101 TRUE       TRUE 0.99213  55.556, 87.525 4.2779e-05
3   3     101 TRUE       TRUE 0.99150 65.143, 166.481    < 1e-05
4   4     101 TRUE       TRUE 0.98110  105.77, 169.81    < 1e-05
5   5     101 TRUE       TRUE 0.98385 49.123, 173.913    < 1e-05
6   6     101 TRUE       TRUE 0.99337         70, 150    < 1e-05
7   7     101 TRUE       TRUE 0.98399  47.619, 87.912    < 1e-05
8   8     101 TRUE       TRUE 0.98558 86.957, 129.533    < 1e-05
9   9     101 TRUE       TRUE 0.97533 49.123, 115.938    < 1e-05
10 10     101 TRUE       TRUE 0.99615 65.116, 195.238    < 1e-05
11 11     101 TRUE      FALSE 0.98285 32.514, 100.000    0.35968
12 12     101 TRUE       TRUE 0.96547 43.477, 150.997 0.00040012
13 13     101 TRUE       TRUE 0.99443 87.881, 230.667  0.0002774
14 14     101 TRUE       TRUE 0.97773  157.89, 248.02    < 1e-05
15 15     101 TRUE       TRUE 0.99110  157.30, 234.74    < 1e-05
#+end_example

Here an upslope, plateau, normalization (101 pattern) could be fitted
for all individuals but had it not been the case, the pattern =11=
would have been used instead. Once more key summary statistics can be extracted using
the =model.tables= method:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
model.tables(e.XPall, format = "array")[,,1:2]
#+END_SRC

#+RESULTS:
#+begin_example
, , 1

       time  duration intercept       slope
1   0.00000  84.50704         0  0.11833333
2  84.50704  77.54424        10  0.00000000
3 162.05128 157.94872        10 -0.06964286
4 320.00000        NA        -1          NA

, , 2

       time  duration intercept       slope
1   0.00000  55.55577  0.000000  0.13500000
2  55.55577  31.96946  7.500029  0.00000000
3  87.52523 172.47477  7.500029 -0.02583333
4 260.00000        NA  3.044431          NA
#+end_example

and a graphical display of the model fit can be obtained using the =plot= method:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
plot(e.XPall, ylim = c(0,10))
#+END_SRC

#+RESULTS:
: Warning message:
: [1m[22mRemoved 89 rows containing missing values or values outside the scale range (`geom_point()`).


#+BEGIN_SRC R :exports none :results output :session *R* :cache no
ggplot2::ggsave(ggplot2::autoplot(e.XPall, ylim = c(0,10))$plot, width = 8, height = 8, file = "inst/figures/gg-all-example.png")
#+END_SRC

#+RESULTS:
: Warning message:
: [1m[22mRemoved 89 rows containing missing values or values outside the scale range (`geom_point()`).

#+BEGIN_HTML
<img src="./inst/figures/gg-all-example.png" title="101/11 pattern - all patient" alt="101/11 pattern - all patient" width="100%" style="display: block; margin: auto;" />
#+END_HTML

** Limitations & alternative

Currently the package is limited to a single continous response
variable and a single breakpoint variable without interaction with
other covariates. No tools for uncertainty quantification or
statistical inference is implemented.

See the [[https://cran.r-project.org/web/packages/segmented/][segmented]] package for an alternative and more mature
implementation of breakpoint models.
